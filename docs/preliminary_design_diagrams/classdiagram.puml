@startuml Class Diagram

class Board {
  int gameId
  int currentTurn
  MoveHistory[] moveHistory
  int[][] currentBoard
  boolean isFinished

  Board initializeBoard()
  boolean validateMove(string move)
  boolean isRepetition(string move)
  boolean isCheckmate(string move)
  boolean isStalemate(string move)
  void updateBoard(move)

  boolean move(string move)
}

class MoveHistory {
  int gameId
  int turn
  string move

  void storeMove(int gameId, int turn)
}

Board "1" *-- "0..*" MoveHistory

class Game {
  int id
  Player whitePlayer
  Player blackPlayer
  Board board
  
  boolean isDrawing

  Game createGame(Player player, boolean pvp)
  string generateInvite()
  boolean addPlayer(Player player)
  void assignPlayer(Player player, Colour colour)
  boolean startGame()

  void concede()
  void draw()
}

enum Colour {
    string black
    string white
}

Game "*" -- "1" Colour

Game "1" *-- "1" Board

class GameRecord {
  int gameId
  GameType gameType
  boolean isDraw
  Optional<Player> winner
  
  GameRecord saveGame(Game game)
}

enum GameType {
  string PVP
  string AI
}

GameRecord "*" -- "1" GameType

abstract class Player {
  int id

  string getMove(int[][] board)
}

class HumanPlayer {
  int id
  String username
  Hash password

  void offerDraw()
  void respondDraw(boolean shouldDraw)
  string getMove(int[][] board)

  void displayError(String error)
  void displayErrors(String[] errors)
}

class RlAgent {
  int id
  FilePointer filePointer

  string getMove(int[][] board)
  void updateBeliefs(GameRecord[] games)
}

Game "1" o-- "2" Player

Player <|-- RlAgent
Player <|-- HumanPlayer

Game "1" *-- "0..1" GameRecord

class Leaderboard {
  LeaderboardEntry[] entries

  LeaderboardEntry[] getLeaderboard()
}

class LeaderboardEntry {
  HumanPlayer player
  int numWins

  void LeaderboardEntry(Player player)
}

Player "1" -- "0..1" LeaderboardEntry

Leaderboard *-- "0..*" LeaderboardEntry

class LoginForm {
  String usernameField
  String passwordField

  ValidationError[] validateFields()
  void submit()
}

class RegistrationForm {
  String usernameField
  String passwordField

  void submit()
}

class ValidationErrors {
  String fieldName
  String error

  ValidationError[] validateFields()
  String toString()
}

LoginForm *-- "0..*" ValidationErrors
RegistrationForm *-- "0..*" ValidationErrors

@enduml
